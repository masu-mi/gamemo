package main

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"strconv"
)

const (
	initialBufSize = 100000
	maxBufSize     = 1000000
)

var sc *bufio.Scanner

func initScanner(r io.Reader) *bufio.Scanner {
	buf := make([]byte, initialBufSize)

	sc := bufio.NewScanner(r)
	sc.Buffer(buf, maxBufSize)
	sc.Split(bufio.ScanWords) // bufio.ScanLines
	return sc
}

func main() {
	sc = initScanner(os.Stdin)
	fmt.Println(resolve(parseProblem()))
}

func parseProblem() int {
	n := scanInt(sc)
	k := scanInt(sc)
	ps := nextIntSlice(sc, n)
	cs := nextIntSlice(sc, n)
	mv := 0
	for i := 0; i < n; i++ {
		if v := score(n, k, ps, cs, i); mv < v {
			mv = v
		}
	}
	return mv
}

func score(n, k int, ps, cs []int, i int) int {

	scores := make([]int, n)
	visited := map[int]int{}
	cur := i
	step := 0
	score := 0

	// simulate
	for step < k {
		visited[cur] = step
		next := ps[cur] - 1
		score += cs[next]
		step++
		if _, ok := visited[next]; ok {
			break
		}
		scores[cur] = score
		cur = next
	}
	startSteps := visited[ps[cur]-1]
	loopSize := step - startSteps
	loopNum := (k - startSteps) / loopSize
	startScore := scores[ps[cur]-1]
	loopScore := score - startScore

	if loopScore > 0 {
		score = startScore + loopScore*loopNum
		k -= loopSize * loopNum
	} else {
		score = 0
		k = min(k, loopSize)
	}

	maxRestScore := 0
	restScore := 0
	for step < k {
		visited[cur] = struct{}{}
		next := ps[cur] - 1
		restScore += cs[cur]
		if maxRestScore < restScore {
			maxRestScore = restScore
		}
		if _, ok := visited[next]; ok {
			break
		}
		cur = next
		step++
	}
	return score + maxRestScore
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// package: gocom
// packed src of [/Users/masumi/dev/src/github.com/masu-mi/gamemo/lib/gocom/next.go] with goone.

func nextInt(sc *bufio.Scanner) int {
	sc.Scan()
	a, _ := strconv.Atoi(sc.Text())
	return int(a)
}

func nextString(sc *bufio.Scanner) string {
	sc.Scan()
	return sc.Text()
}

func nextIntSlice(sc *bufio.Scanner, n int) (a []int) {

	a = make([]int, n)
	for i := 0; i < n; i++ {
		a[i] = nextInt(sc)
	}
	return a
}

func resolve(n int) int {
	return n
}

// snip-scan-funcs
func scanInt(sc *bufio.Scanner) int {
	sc.Scan()
	i, _ := strconv.Atoi(sc.Text())
	return int(i)
}
func scanString(sc *bufio.Scanner) string {
	sc.Scan()
	return sc.Text()
}
